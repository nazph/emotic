"""empty message

Revision ID: 3b6be60904b0
Revises: 3a967695fd40
Create Date: 2016-04-01 04:25:27.965913

"""

# revision identifiers, used by Alembic.
revision = '3b6be60904b0'
down_revision = '3a967695fd40'

from datetime import datetime
import json

from alembic import op
import sqlalchemy as sa


experiment = sa.Table(
        'experiment',
        sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
)

filter_criteria_option = sa.Table(
        'filter_criteria_option',
        sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('attribute_id', sa.Integer, sa.ForeignKey('attribute.id')),
)

attribute = sa.Table(
        'attribute',
        sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('input_type', sa.String(length=2)),
)


class JSONDict(sa.TypeDecorator):
    impl = sa.LargeBinary

    def process_bind_param(self, value, dialect):
        if value is not None:
            value = json.dumps(value)
        return value

    def process_result_value(self, value, dialect):
        if value is not None:
            value = json.loads(value)
        return value


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    _filter = op.create_table('filter',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True, default=datetime.now),
    sa.Column('changed_at', sa.DateTime(), nullable=True, onupdate=datetime.now),
    sa.Column('parameters', JSONDict, nullable=True),
    sa.Column('experiment_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['experiment_id'], ['experiment.id'], ),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['attribute_id'], ['attribute.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    acceptable_experiments_criteria = sa.Table(
            'acceptable_experiments_criteria',
            sa.MetaData(),
            sa.Column('option_id', sa.Integer, sa.ForeignKey('filter_criteria_option.id')),
            sa.Column('experiment_id', sa.Integer),
    )

    connection = op.get_bind()
    rows = connection.execute(
            sa.select([experiment, attribute], use_labels=True)).fetchall()
    for row in rows:
        kind = row[attribute.c.input_type]
        attr_id = row[attribute.c.id]
        exp = row[experiment.c.id]
        if kind in ['ss', 'ms']:
            res = connection.execute(sa.select([
                acceptable_experiments_criteria,
                filter_criteria_option]).where(
                    sa.and_(
                        acceptable_experiments_criteria.c.option_id == filter_criteria_option.c.id,
                        filter_criteria_option.c.attribute_id == attr_id,
                        acceptable_experiments_criteria.c.experiment_id == exp)))
            selected = [r.option_id for r in res]
            if selected:
                connection.execute(_filter.insert().values(
                    attribute_id=attr_id,
                    experiment_id=row[experiment.c.id],
                    parameters={'selected': selected}))

    op.rename_table('filter_criteria_option', 'select_option')
    op.drop_table('acceptable_experiments_criteria')
    op.drop_table('possible_filter_criteria_options')
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    possible_filter_criteria_options = op.create_table('possible_filter_criteria_options',
    sa.Column('option_id', sa.INTEGER(), nullable=True),
    sa.Column('attribute_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['attribute_id'], [u'attribute.id'], ),
    sa.ForeignKeyConstraint(['option_id'], [u'filter_criteria_option.id'], )
    )
    acceptable_experiments_criteria = op.create_table('acceptable_experiments_criteria',
    sa.Column('option_id', sa.INTEGER(), nullable=True),
    sa.Column('experiment_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['experiment_id'], [u'experiment.id'], ),
    sa.ForeignKeyConstraint(['option_id'], [u'filter_criteria_option.id'], )
    )

    _filter = sa.Table(
        'filter',
        sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('parameters', JSONDict),
        sa.Column('experiment_id', sa.Integer),
        sa.Column('attribute_id', sa.Integer),
    )

    connection = op.get_bind()
    rows = connection.execute(
        sa.select([_filter, attribute]).where(
            sa.and_(
                _filter.c.attribute_id == attribute.c.id,
                sa.or_(attribute.c.input_type == 'ms', attribute.c.input_type == 'ss')))
    ).fetchall()
    for row in rows:
        for opt in row['parameters']['selected']:
            connection.execute(acceptable_experiments_criteria.insert().values(
                option_id=opt, experiment_id=row['experiment_id']))

    op.rename_table('select_option', 'filter_criteria_option')
    rows = connection.execute(sa.select([filter_criteria_option])).fetchall()
    for row in rows:
        connection.execute(possible_filter_criteria_options.insert().values(
            option_id=row['id'], attribute_id=row['attribute_id']))

    op.drop_table('filter')
    ### end Alembic commands ###
